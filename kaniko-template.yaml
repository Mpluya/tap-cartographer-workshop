apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: kaniko-template
spec:
  params:
    - name: serviceAccount
      default: default
    - name: registry
      default: {}

  imagePath: .status.latestImage

  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def image():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@    ])
    #@   ])
    #@ end

    apiVersion: v1
    kind: Pod
    metadata:
      name: kaniko
      labels: #@ merge_labels({ "app.kubernetes.io/component": "build" })
    spec:
      serviceAccountName: #@ data.values.params.serviceAccount
      containers:
      - name: kaniko
        image: gcr.io/kaniko-project/executor:latest
        args:
        - #@ "--dockerfile=" + str(data.values.params.dockerfile)
        - #@ "--context=" + str(data.values.source.url.replace("http", "https"))
        - #@ "--destination=" + str(image())
        - #@ "--insecure"
        - #@ "--skip-tls-verify"
        volumeMounts:
        - name: kaniko-secret
          mountPath: /kaniko/.docker
        env:
        #@ if hasattr(data.values.workload.spec.build, "env"):
        #@ for var in data.values.workload.spec.build.env:
        - name: #@ var.name
          value: #@ var.value
        #@ end
        #@ end
      restartPolicy: Never
      volumes:
      - name: kaniko-secret
        secret:
        secretName: registry-credentials
        items:
          - key: .dockerconfigjson
            path: config.json
