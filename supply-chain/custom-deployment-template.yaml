apiVersion: carto.run/v1alpha1
kind: ClusterTemplate
metadata:
  name: custom-deployment-template
spec:
  params:
  - name: serviceAccount
    default: default
  - name: tlsSecretName
    default: ""
  - name: ingressDomain
    default: ""
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels: #@ merge_labels({ "app.kubernetes.io/component": "run" })
      name: #@ data.values.workload.metadata.name
    spec:
      selector:
        matchLabels:
          app: webapp
      template:
        metadata:
          labels: #@ merge_labels({ "app": "webapp" })
        spec:
          containers:
            - image: #@ data.values.image
              name: workload
              ports:
              - containerPort: 5000
                name: user-port
                protocol: TCP
              securityContext:
                runAsUser: 1000
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels: #@ merge_labels({ "app.kubernetes.io/component": "run" })
      name: #@ data.values.workload.metadata.name
    spec:
      ports:
      - name: http
        port: 80
        protocol: TCP
        targetPort: 5000
      type: ClusterIP
    ---
    apiVersion: projectcontour.io/v1
    kind: HTTPProxy
    metadata:
      name: #@ data.values.workload.metadata.name
    spec:
      routes:
      - services:
        - name: #@ data.values.workload.metadata.name
          port: 80
      virtualhost:
        fqdn:  #@ "{}-{}.{}".format(data.values.workload.metadata.namespace,data.values.workload.metadata.name,data.values.params.ingressDomain)
        #@ if hasattr(data.values.params, "tlsSecretName"):
        tls:
          secretName: data.values.params.tlsSecretName
        #@ end